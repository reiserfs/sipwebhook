name: Build and Publish Docker Image

on:
  push:
    branches:
      - main

permissions:
  contents: write
  packages: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2   
      with:
        fetch-depth: 0  # Obtém todas as tags      

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Get current version
      id: get_version
      run: |
        git describe --tags
        VERSION=$(git describe --tags --abbrev=0 || echo "v0.1.0")  # Define uma versão padrão se não houver tags
        echo "Current version is $VERSION"
        echo "VERSION=$VERSION" >> $GITHUB_ENV  # Usando arquivo de ambiente

    - name: Increment version
      id: increment_version
      run: |
        IFS='.' read -ra ADDR <<< "${VERSION/v/}"  # Remove 'v' para o split
        MAJOR=${ADDR[0]}
        MINOR=${ADDR[1]}
        PATCH=${ADDR[2]}
        NEW_VERSION="v$MAJOR.$MINOR.$((PATCH + 1))"  # Adiciona 'v' de volta
        echo "New version will be $NEW_VERSION"
        echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV  # Usando arquivo de ambiente


    - name: Build Docker image
      run: |
        docker build -t ghcr.io/${{ github.repository }}/sip-webhook:${{ env.NEW_VERSION}} .

    - name: Log in to GitHub Container Registry
      run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u "${{ github.actor }}" --password-stdin

    - name: Push Docker image
      run: |
        docker push ghcr.io/${{ github.repository }}/sip-webhook:${{ env.NEW_VERSION }}

    - name: Configure Git identity
      run: |
        git config --global user.email "kmreiserfs@email.com"  # Substitua pelo seu e-mail
        git config --global user.name "kmreiserfs"  # Substitua pelo seu nome

    - name: Create a Git tag
      run: |
        git tag -a "${{ env.NEW_VERSION}}" -m "Release version ${{ env.NEW_VERSION }}"
        git push origin "${{ env.NEW_VERSION }}"
